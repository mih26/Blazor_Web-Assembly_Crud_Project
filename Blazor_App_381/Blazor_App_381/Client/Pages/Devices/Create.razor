@page "/Devices/Create"
@using System.Net.Http.Headers;
@inject HttpClient http
<div class="row">
    <div class="col-12">
        <EditForm Model="@device" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <h3>Create New Mobile</h3>
            @if (isError is not null && msg != "" && !isError.Value)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <strong>Success!</strong> Data saved.
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            @if (isError is not null && msg != "" && isError.Value)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <strong>Failed!</strong> Failed to save data.
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            <div class="form-group row mb-1">
                <label class="col-form-label col-form-label-sm col-2">Mobile Model</label>
                <div class="col-4">
                    <InputText class="form-control form-control-sm" @bind-Value="device.DeviceName" />
                    <ValidationMessage For="@(()=> device.DeviceName)" class="text-danger" />
                </div>

            </div>
            <div class="form-group row mb-1">
                <label class="col-form-label col-form-label-sm col-2">Manufacture Date</label>
                <div class="col-4">
                    <InputDate Type="InputDateType.Date" class="form-control form-control-sm" @bind-Value="device.ReleaseDate" />
                    <ValidationMessage For="@(()=> device.ReleaseDate)" class="text-danger" />
                </div>

            </div>
            <div class="form-group row mb-1">
                <label class="col-form-label col-form-label-sm col-2">Price</label>
                <div class="col-4">
                    <InputNumber class="form-control form-control-sm" @bind-Value="device.Price" />
                    <ValidationMessage For="@(()=> device.Price)" class="text-danger" />
                </div>

            </div>
            <div class="form-group row mb-1">
                <label class="col-form-label col-form-label-sm col-2">Available</label>
                <div class="col-4">
                    <InputCheckbox @bind-Value="device.OnSale" />

                </div>

            </div>
            <div class="form-group row mb-1">
                <label class="col-form-label col-form-label-sm col-2">Price</label>
                <div class="col-4">
                    <InputFile OnChange="@OnInputFileChange" class="form-control form-control-sm" />
                    <input type="hidden" @bind="device.Picture" />
                    <ValidationMessage For="@(()=> device.Picture)" class="text-danger" />
                </div>

            </div>
            <div class="form-group row mb-1 col-6">
                <div class="d-flex justify-content-between mb-1">
                    <h6>Configuration</h6>
                    <button @onclick="@AddSpec" type="button" class="btn btn-warning btn-sm">+</button>
                </div>
                @foreach (var s in device.Specs)
                {
                    <div class="form-group row mb-1">
                        <label class="col-form-label col-form-label-sm col-2">Configuration Category</label>
                        <div class="col-4">
                            <InputText @bind-Value="@s.SpecName" class="form-control form-control-sm" />

                            <ValidationMessage For="@(()=> s.SpecName)" class="text-danger" />
                        </div>
                        <label class="col-form-label col-form-label-sm col-2">Details</label>
                        <div class="col-3">
                            <InputText @bind-Value="@s.Value" class="form-control form-control-sm" />

                            <ValidationMessage For="@(()=> s.Value)" class="text-danger" />
                        </div>
                        <div class="col-1">
                            <button @onclick="@(()=>RemoveSpec(@s))" type="button" class="btn btn-info btn-sm">X</button>
                        </div>
                    </div>
                }
            </div>
            <div class="form-group row">

                <div class="col-6 text-end">
                    <button type="submit" class="btn btn-warning">Save</button>
                </div>

            </div>
            <div class="d-flex justify-content-start align-baseline-item-center mb-1"></div>
            <a href="/Devices/list" class="btn btn-success btn-sm">Back to List</a>
        </EditForm>
    </div>
</div>

@code {
    private Device device = new();
    private IBrowserFile? selectedFile;
    private bool? isError;
    private string msg = "";
    private void AddSpec()
    {
        this.device.Specs.Add(new Spec());
    }
    private void RemoveSpec(Spec s)
    {
        device.Specs.Remove(s);
    }
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        device.Picture = e.File.Name;

        //this.StateHasChanged();
    }
    protected override Task OnInitializedAsync()
    {
        AddSpec();
        return base.OnInitializedAsync();
    }
    private async Task Save()
    {
        isError = false;
        msg = "";
        var saveImage = await UploadItAsysnc();
        device.Picture = saveImage.StoredFileName;
        var response = await http.PostAsJsonAsync("api/Devices", device);
        if (response.IsSuccessStatusCode)
        {
            isError = false;
            msg = "Ok";
            device = new();
            AddSpec();
        }
        else
        {
            isError = true;
            msg = "Failed";
        }
    }
    private async Task<ImageUploadResponse> UploadItAsysnc()
    {
        using (var ms = new MemoryStream())
        {

            if (selectedFile is not null)
            {
                var content = new MultipartFormDataContent();
                var fileContent = new StreamContent(selectedFile.OpenReadStream(long.MaxValue));

                fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(content: fileContent, name: "\"file\"", fileName: selectedFile.Name);
                var response = await http.PostAsync("api/Devices/Upload", content);
                var r = await response.Content.ReadFromJsonAsync<ImageUploadResponse>();
                return r == null ? new ImageUploadResponse() : r;
            }
            else
            {
                return new ImageUploadResponse();
            }

        }
    }
}